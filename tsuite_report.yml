- name: Analyze testing suite results
  hosts: testing_vm
  become: true
  become_user: tsuite1
  vars_files:
    - main.yml

  tasks:
    - name: Set run_dir to latest run
      set_fact:
        run_dir: "{{ base_dir }}/{{ release_version }}/run_latest"

    - name: Check that run_latest symlink exists
      stat:
        path: "{{ run_dir }}"
      register: latest_link

    - name: Fail if no valid latest run directory found
      fail:
        msg: "No valid 'run_latest' symlink found in {{ base_dir }}/{{ release_version }}. Run the testing suite first."
      when: not latest_link.stat.exists

    - name: Check experiment status
      shell: bash -l -c "~/envs/tsuite-env/bin/testing_suite --status --config_file {{ config_file }} > {{ run_dir }}/status.log 2>&1"
      args:
        chdir: /home/tsuite1/testing_suite
      register: suite_status
      failed_when: false

    - name: Show status table
      debug:
        var: suite_status.stdout

    - name: Identify FAILED experiments (extract test_id and job)
      shell: |
        awk -F'|' '/FAILED/ {gsub(/^ *| *$/, "", $2); gsub(/^ *| *$/, "", $4); print $2, $4}' {{ run_dir }}/status.log
      args:
        chdir: /home/tsuite1/testing_suite
      register: failed_exps
      changed_when: false
      when: latest_link.stat.exists

    - name: Debug failed_exps
      debug:
        var: failed_exps.stdout_lines

    - name: Get latest error and output logs per failed test
      shell: |
        test_id="{{ item.split()[0] }}"
        jobs="{{ item.split()[1:] | join(' ') }}"
        log_dir="/appl/AS/AUTOSUBMIT_DATA/${test_id}/tmp/LOG_${test_id}"
        for job in $jobs; do
          for ext in err out; do
            latest=$(ls -1t ${log_dir}/${job}*.${ext} 2>/dev/null | head -n1)
            if [ -n "$latest" ]; then
              echo "## ${test_id} (${job}.${ext})"
              echo "Log: $latest"
              echo '```'
              tail -n 15 "$latest"
              echo '```'
              echo
            else
              echo "## ${test_id} (${job}.${ext})"
              echo "No log file found"
              echo
            fi
          done
        done
      loop: "{{ failed_exps.stdout_lines }}"
      register: failed_logs
      args:
        chdir: /home/tsuite1/testing_suite

    - name: Create failure report
      copy:
        dest: "{{ run_dir }}/failure_report.log"
        content: |
          {% for res in failed_logs.results %}
          {{ res.stdout }}
          {% endfor %}
        owner: tsuite1
        group: tsuite1
        mode: '0644'
      become: true

    - name: Fetch failure report
      fetch:
        src: "{{ run_dir }}/failure_report.log"
        dest: "./failure_report.log"
        flat: true

    - name: Print failure report on screen
      delegate_to: localhost
      command: cat ./failure_report.log
      register: report_out
      become: false

    - debug:
        msg: "{{ report_out.stdout }}"
